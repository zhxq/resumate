{
    "name": "en",
    "type": "lang",
    "vars":{
        "introductiontoresumatetitle": "Introduction to Resumate",
        "codeforthispage": "Code for this page",
        "codeforthisblock": "Code for this block",
        "pagesintrotitle": "Writing Pages",
        "pagesintroline1": "We have introduced some basics about writing pages: Define <code>name</code> as the identifier of this configuration file, <code>type</code> for the configuration type, <code>content</code> as a list with referred contents (other blocks/templates/HTML tags/strings), and the final <code>vars</code> as a dict representing default values for Macros being applied to the whole file and all referred contents.",
        "pagesintroline2": "Let's start from a new page with better structure by using blocks. Suppose we want to build a new page called <code>page1</code> with three parts, namely <code>blocka</code>, <code>blockb</code> and <code>blockc</code>. This is a better way of writing page configuration files, as we separated different parts of the page into smaller blocks，sanitating the page with a rich content with better maintainability. Thus we can define a page called <code>page1</code>, with a title on top and blocks below: ",
        "pagesintroline3": "...and now we get deeper with the configuration file for <code>blocka</code> - <code>blockb</code> and <code>blockc</code>are similar, but of course we need to change them into something else according to their real contents, respectively.",
        "pagesintroline4": "Now let us do something more interesting. Suppose we need to call some JavaScript methods and/or make use of some external css definitions, then we can use <code>js</code> and/or <code>css</code> list(s) to define required JS/CSS files. Resumate will load all necessary JavaScript files first, then load the HTML rendered by Resumate, which can prevent JavaScript code defind in HTML calling functions in not-yet-loaded JS files. For the sake of loading speed, Resumate will first fetch all JS files first (in no particular order and with maximum possible concurrency), then load the HTML with CSS requisites defined as <code>&lt;link&gt;</code>s on the top of HTML. <code>js</code> and <code>css</code> are also available in Blocks, Templates and HTML definitions, with full support on local and remote files. Besides, the same file will be only loaded once for each render.",
        "pagesintroline5": "Here we requested ./file1.js (at ./definition/pages/js/file1.js) and a JavaScript file from example.com. Be cautious on the URL you listed in your configurations: Resumate will automatically check if the URL for your JS/CSS file starts with //，http:// or https://. If so, Resumate will consider this as an absolute path and will leave the path unmodified; otherwise it will consider the path as a relative path and add the path of that configuration file to that JS/CSS file. Similarly, Resumate will request some.css from example.com and my.css under ./definition/pages/css. Don't assume Resumate will load these files in order, but remember: Resumate will print the rendered HTML on the page after all JS files are loaded. If you want to execute some JS code after the page shows, then consider adding a <code>&lt;script&gt;</code> - Choose whatever way you like: by a simple HTML string, or using the HTML definition provided by Resumate. A great instance for this scenario can be found at <a href=\"https://github.com/zhxq/resumate/blob/master/definitions/templates/jsoncode.json\">here</a>, the definition of <code>jsoncode</code>, a template showing highlighted and formatted JSON code.",
        "htmlintroductiontitle": "HTML - Handbook",
        "htmlintroductionbasicstitle": "HTML - Introduction",
        "htmlintroductionbasicsline1": "HTML is the language used by Resumate and any other websites. It is a markup language used by browsers to render codes into visible pages for visitors. There is no difference for Resumate on that: all definitions will be rendered into HTML and then rendered by the browsers, and thus we need to define HTML tags for Resumate to successfully translate its configuration files into webpages.",
        "htmlintroductionbasicsline2": "Similar to Pages, Blocks and Templates, there are also some required information in HTML definitions. <code>name</code>, <code>type</code> and <code>content</code> are still important and crucial as before, but HTML definitions have two more required properties: <code>attr</code> can be used to define HTML tag attributes, and <code>close</code> as a boolean to indicate if an HTML tag should close (e.g.: <code>&lt;a&gt</code> and <code>&lt;div&gt</code> should close, but <code>&lt;img&gt</code> doesn't). Please take a look on the definition for <code>p</code> tag below: ",
        "htmlintroductionbasicsline3": "But there is one reminder: when quoting HTML tags in other configuration files, the <code>content</code> must be a JSON list. The reason is that there is a minor difference between <code>content</code> in HTML tags and <code>content</code> in Pages, Blocks and Templates: <code>content</code> in HTML tags supports prefixes and postfixes to be clipped onto given content passed into that HTML tag, which made some HTML tags make more sense and more flexible, especially for tags like <code>table</code> and <code>ul</code>, having too many similar tags inside them controlling the format. Please take a look on the definition for <code>ul</code> tag below: ",
        "htmlintroductionbasicsline4": "Observe the definition of <code>content</code> for <code>ul</code>: for every single element in the <code>content</code> list, we will add <code>&lt;li&gt;</code> and <code>&lt;/li&gt;</code> for pre- and postfixes automatically, making <code>ul</code> works much better and easier than before by automatically treating them as entries and adding <code>&lt;li&gt;</code> and <code>&lt;/li&gt;</code> automatically around each entry - see the example below: ",
        "htmlintroductionbasicsline5": ["Again: in the <code>content</code> list of <code>ul</code>, each element will be iterated as <code>$content$</code> and add <code>&lt;li&gt;</code> and <code>&lt;/li&gt;</code> around it before adding into <code>ul</code> as an entry. The <b>", "$samplecodeexplain$", "</b> section in the Home page is written by something like this."],
        "introductiontoresumateoutofboxtitle": "Use Resumate, Out-of-the-box Style",
        "introductiontoresumateoutofboxline1": "Just want to use Resumate out-of-the-box? It's easy. Resumate comes with multi-language support (with configuration files located under ./definition/lang), and you can define different strings for different languages. You can refer to existing files under ./definitions/pages (defining Pages - to be rendered for visitors) and ./definition/blocks (defining Blocks, for the sanitation and modularization of Pages) and writing your own configuration files. You can also refer to the configuration used by the academic page of Resumate's original author here.",
        "introductiontoresumateoutofboxline2": "After finishing your own configuration files, you need to modify <code>settings.json</code> for site configurations, in which you can modify site title, SEO information, menu settings (defining pages can be referred by the menu), and supported languages.",
        "introductiontoresumateoutofboxline3": "Menu settings are defined by the dict <code>menu</code>. Each key in this dict will be the filename of that page configuration (e.g.: key name “home” means the file will be ./definitions/pages/home.json). <code>readable</code> defines the text to be shown on the menu, <code>right</code>, a boolean, indicates if the option will be put on the right side of the menu. <code>dropdown</code>, an optional key with a dict as content, is similar to dict <code>menu</code> itself, with key name referring to the page file and <code>readable</code> as the string to be displayed.",
        "introductiontoresumateoutofboxline4": "In configuration files, almost all values support multi-language. For instance, if you defined a string with key name <code>somestring</code> in your language files, you can refer that string by using <code>\"$somestring$\"</code> when needed. Similar usage applies to other configuration files.",
        "introductiontoresumateoutofboxline5": "If you are still confused about writing configuration files, we recommend you to read the configuration files of this block, along with each block on this page (you can find links next to every chapter title). Please don't hesitate to ask us on GitHub or checkout the code used by the original author of Resumate on his personal academic website.",
        "introductiontoresumatebasicstitle": "Basics",
        "introductiontoresumatebasicsline1": "Resumate is a handy tool to write your personal site. You don't need to know anything about writing codes - just write definitions to tell what you are going to show to your visitors, using some predefined templates. Of course, you can expand functionalities of Resumate by writing your own templates as well.",
        "introductiontoresumatebasicsline2": "There are four different types of <i>renderable</i> configuration files for Resumate: page, block, template and html, in an \"decomposing\" order, and they have similar grammars (especially for the first three kinds). For each JSON configuration file, <code>name</code>, <code>type</code> are required, with optional <code>content</code> and <code>vars</code>.To better illustrate the grammar of these files, here is a basic Resumate Page configuration file, which defined <i><b><span style=\"color: red;\">referals</span></b></i>(!!) in <code>content</code> to other block/template/HTML configurations: ",
        "introductiontoresumatebasicsline3": ["Different kinds of configuration files should be placed under different directories. Pages should be placed under <code>./definition/pages</code>, blocks should be placed under <code>./definition/blocks</code>, templates should be placed under <code>./definition/templates</code>, and finally HTML definitions should be placed under <code>./definition/html</code>.  The JSON above defined a page called <code>newpage</code> (filename should be consistent with the <code>name</code> - in this case, it should be named as newpage.json under ./definitions/pages), which will be rendered as a page to be read by visitors. It <i><b><span style=\"color: red;\">referred</span></b></i> a string with HTML markup, a link to http://example.com/ showing “This is a link”, two highlighted blocks for JSON (just like the one you see above), and referred a block called <code>someblock</code>. You can write HTML in an ordinary string, and it will be rendered as well since Resumate will transparently pass HTML strings without any treatment. For the Macros passed into other Pages, Blocks or Templates when referring to them, if there is only one string element in the list, the list can be substituted simply by that string (e.g.: [\"thisisanotherjson\"] is the same as \"thisisanotherjson\" in the code above). However, when referring to other HTML definitions (<code>&lt;a&gt;</code> above, for example), <code>content</code> must be a list with reasons can be found at <i>", "$sitemenuhtmldoc$", "</i> session (see the menu)."],
        "introductiontoresumatebasicsline4": "For pages, blocks and templates, <code>content</code> - a JSON-format list, is very important. It defined how to refer existing pages, blocks, templates and/or html.",
        "introductiontoresumatebasicsline5": "Some Macros are also defined in the JSON above. <code>vars</code> located at the bottom defined two Macros with a scope of the file itself, plus all referred configuration files (recursively). Those two Macros will be used if these two Macros were not defined in the file referred this JSON file (in other words, this section defined default values for these two Macros to be applied in this file and all its subsidiaries). A little more elaboration: If file A referred file B, which then referred file C, then if a Macro is defined in A, then the definition for the value of that Macro in B or C will be void - the value of that Macro from A will be used. Macros defined in language files will be read by the renderer before any other configuration files (except settings.json) are parsed, so the Macros defined in language files will have a global scope that can be used in any configuration file. In the <code>content</code>, we have referred a list of block, template, and html files, and we can pass existing Macros, a simple string, or a reference to (even a list of) other page/site/template configuration file(s) (which will be parsed into an HTML string) to them.",
        "introductiontoresumatetemplatestitle": "Templates",
        "introductiontoresumatetemplatesline1": "Template is the core of Resumate. It defines an abstract template which can be used over and over again (e.g.: a formatted list of someone's academic papers, or a place to automatically render a piece of code). Modularization is crucial to keep codes simple and readable, with ability to be reused and shared.",
        "introductiontoresumatetemplatesline2": "The following example is <code>titlewdiv</code> template used by this site again and again. It contains a <code>&lt;div&gt;</code> html element, with contents from top to bottom: an <code>&lt;h3&gt;</code> html element and a <code>cdiv</code> template.",
        "introductiontoresumatetemplatesline3": "See those Macros with prefix <code>twd_template_</code>? Those are the Macros used in this template, which will be substituted with real contents when rendered. We recommend you to add some identical prefix for the Macros when writing a template. If you want to define default values for some Macros used in this template, you can consider add those in the <code>vars</code> dict located at the root of the template configuration with the format shown above.",
        "introductiontoresumatetemplatesline4": "When the template is referred by other pages, blocks or templates (referers), this template (the referee) can be referred by putting something similar to the code above in the <code>content</code> list of the referer:",
        "introductiontoresumatetemplatesline5": [
            "Here we passed two Macros and respective values to the template: <code>twd_template_title</code> and <code>twd_template_paragraph</code>. The value of the former Macro is <code>\"$codeforabove$\"</code>, which is the value of Macro <code>codeforabove</code>. The latter one is a list, with following contents sequentially: ",
            {
                "name": "ul",
                "content": [
                    "Value of Macro <code>outofboxtemplates</code>,",
                    "A string: <code>\" ...and let's see some code!\"</code>,",
                    "A template <code>jsoncode</code>, with two Macros defined and passed to that template: <code>jc_template_json_id</code> (HTML id for the HTML element rendering that piece of JSON) and <code>jc_template_json</code> (the JSON string to be rendered),",
                    "A string: <code>\"&lt;br&gt;&lt;br&gt;...and that is the end of that chapter.\"</code>"
                ]
            }
        ],
        "constructing": "Constructing",
        "constructing...": "Constructing...",
        "outofboxtemplates": "Out of Box",
        "writingtemplates": "Custom",
        "resumatesitetitle": "Resumate - Write Yor Page Using JSON!",
        "introline1": "Flexible and Data-driven Personal Page",
        "introline2": "With JSON-based Templates and Contents",
        "sitemenutitle": "Resumate",
        "sitemenuhome": "Home",
        "sitemenubasics": "Basics",
        "sitemenusitesdoc": "Pages",
        "sitemenutemplatesdoc": "Templates",
        "sitemenuhtmldoc": "HTML Elements",
        "whatisresumate": "What's Resumate?",
        "resumateintro": "Resumate is a tool allowing you to render HTML pages using JSON-based templates, which is convienient for occationally updated page with repeating elements (e.g.: a Ph.D. personal homepage with a list of publications, formatted with title, authors, description and link). Using Resumate, it is able to refer the template ten times and give title, authors, description and link easily, instead of copying and pasting HTML for ten times and insert those information in their repective places. Resumate also comes with multi-language and site theme support, so you don't need to worry about globalizing or beautifying your page.<br><br>You can also find the JSON source code of <i>this</i> page you are currently reading - on <a href=\"https://github.com/zhxq/resumate/blob/master/definitions/pages/home.json\">GitHub</a>.",
        "educationexp": "Example: Edu Experience",
        "educationphdstart": "Doctor of Juridical Science at Harvard University (Supervisor: ",
        "educationexampleprof": "Professor R. Sumate",
        "educationphdend": ") (2014-2019)",
        "educationms": "Master of Science in Computer Science at Yale University (2012-2014)",
        "educationbachelor": "Bachelor of Science in Mathematics at Brown University (2008-2012)",
        "educationdescription": "Above (including this paragraph) is rendered from <code>education</code> template of Resumate. I can provide 5 Macros: <code>edu_template_title</code>, <code>edu_template_phd</code>, <code>edu_template_master</code>, <code>edu_template_bachelor</code> and <code>edu_template_comment</code> to the template, and the renderer will figure out the right thing, since the format is pre-defined by the writer of the template already.",
        "codeforabove": "Code for the Example Above",
        "samplecodeexplain": "Explaination",
        "samplecodeexplainmain": [
            "The code above referred <code>education</code> template and passed those 5 Macros to the template. When Resumate is parsing templates, it will find the value for the Macro and print it on the page.",
            {
                "name": "ul",
                "attr": {
                    "style": {
                        "text-align": "left"
                    }
                },
                "content": [
                    ["<code>edu_template_title</code> is the title of this template, which referred Macro <code>$educationexp$</code>: Use $ symbol at the start/end of the Macro name to request the value of the Macro. This Macro is defined in the language file, and Resumate will show different value for this Macro in different languages. In this language, its value is:“", "$educationexp$", "”."],
                    ["<code>edu_template_phd</code> is a place to show your Doctorate experience. Here, we provided a list containing <code>$educationphdstart$</code>, <code>link</code> template (a wrapper to <code>&lt;a&gt;</code> to generate HTML links), and the final <code>$educationphdend$</code>. The list will be resolved by Resumate into an HTML string, then passed into <code>edu_template_phd</code>. You can also substitute this list using a single line with HTML, since Resumate will pass HTML strings transparently."],
                    ["<code>edu_template_ms</code> is a place to show your Masters experience. Similar to <code>edu_template_title</code>, the value of <code>$educationms$</code> will be passed to <code>edu_template_ms</code>。"],
                    ["<code>edu_template_bachelor</code> is a place to show your Bachelors experience. Similar to <code>edu_template_title</code>, the value of <code>$educationbachelor$</code> will be passed to <code>edu_template_bachelor</code>。"],
                    ["<code>edu_template_comment</code> is a place to elaborate a little bit more for your education experience. Similar to <code>edu_template_title</code>, the value of <code>$educationdescription$</code> will be passed to <code>edu_template_comment</code>。"]
                ]
            },
            "After Resumate resolves the template into HTML, it will be passed into its upper level (the Page or Block that requested it), and ultimately becomes a pure HTML page."
        ]
    }
}